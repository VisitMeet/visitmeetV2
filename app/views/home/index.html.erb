<main class="w-full">
  <section class="landing_page min-h-screen bg-cover bg-center relative overflow-hidden" style="background-image: url('/images/bgimage.jpg');">
    <!-- Overlay for better text contrast -->
    <div class="absolute inset-0 bg-gradient-to-br from-indigo-700/70 to-emerald-500/70 z-10"></div>

    <div class="container mx-auto px-4 flex items-center justify-center h-full relative z-20">
      <div class="content-wrapper flex flex-col items-center justify-center w-full text-white text-center">
        <div class="hero-content w-full max-w-3xl mx-auto mb-12">
          <h1 class="hero-text text-5xl md:text-6xl font-extrabold leading-tight mb-4 drop-shadow-lg">Experience Cities Like a Local</h1>
          <p class="text-lg md:text-xl mb-8 max-w-2xl mx-auto opacity-90">
            Book unique experiences and stay with trusted locals around the world
          </p>

          <%= form_with url: search_results_path, method: :get, local: true, class: "max-w-4xl mx-auto", id: "hero-search-form", data: { controller: "search-tags" } do %>
            <div class="bg-white/90 backdrop-blur-lg rounded-3xl shadow-2xl p-6 md:p-8 border border-white/20">
              <!-- Search Header -->
              <div class="text-center mb-6">
                <h3 class="text-2xl font-bold text-gray-800 mb-2">Find Your Perfect Local Experience</h3>
                <p class="text-gray-600">Connect with authentic local hosts and discover hidden gems</p>
              </div>

              <!-- Tag Input -->
              <div class="mb-6">
                <div class="flex flex-wrap gap-2 mb-2" data-search-tags-target="tags"></div>
                <input type="text" placeholder="Type and press enter..." class="w-full px-6 py-3 border-none rounded-full text-gray-800 placeholder-gray-400 focus:ring-2 focus:ring-blue-400 focus:outline-none transition-all duration-200 shadow-sm" data-search-tags-target="input" data-action="keydown->search-tags#addTag">
                <input type="hidden" name="tags" data-search-tags-target="hidden">
              </div>

              <!-- Quick Filters -->
              <div class="mb-6">
                <p class="text-sm font-medium text-gray-600 mb-3 text-center">Popular combinations:</p>
                <div class="flex flex-wrap justify-center gap-2">
                  <button type="button" class="quick-filter px-4 py-2 bg-blue-100/50 text-blue-800 rounded-full text-sm font-medium transition-all duration-200 hover:bg-blue-200/70 hover:shadow-md transform hover:scale-105" data-location="tokyo" data-profession="photographer">
                    üì∏ Tokyo Photographer
                  </button>
                  <button type="button" class="quick-filter px-4 py-2 bg-blue-100/50 text-blue-800 rounded-full text-sm font-medium transition-all duration-200 hover:bg-blue-200/70 hover:shadow-md transform hover:scale-105" data-location="paris" data-profession="chef">
                    üë®‚Äçüç≥ Paris Chef
                  </button>
                  <button type="button" class="quick-filter px-4 py-2 bg-blue-100/50 text-blue-800 rounded-full text-sm font-medium transition-all duration-200 hover:bg-blue-200/70 hover:shadow-md transform hover:scale-105" data-location="bali" data-profession="guide">
                    üèùÔ∏è Bali Guide
                  </button>
                  <button type="button" class="quick-filter px-4 py-2 bg-blue-100/50 text-blue-800 rounded-full text-sm font-medium transition-all duration-200 hover:bg-blue-200/70 hover:shadow-md transform hover:scale-105" data-location="barcelona" data-profession="artist">
                    üé® Barcelona Artist
                  </button>
                </div>
              </div>

              <!-- Advanced Options Toggle -->
              <div class="text-center mb-6">
                <button type="button" id="advanced-toggle" class="text-blue-600 hover:text-blue-700 text-sm font-medium flex items-center mx-auto transition-colors">
                  <span>More search options</span>
                  <svg class="w-4 h-4 ml-1 transform transition-transform" id="advanced-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </button>
              </div>

              <!-- Advanced Options -->
              <div id="advanced-options" class="hidden mb-6 p-4 bg-gray-50 rounded-xl border border-gray-200">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Experience Type</label>
                    <select name="experience_type" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400">
                      <option value="">Any experience</option>
                      <option value="food">Food & Dining</option>
                      <option value="culture">Culture & History</option>
                      <option value="adventure">Adventure & Outdoors</option>
                      <option value="arts">Arts & Creativity</option>
                      <option value="nightlife">Nightlife & Entertainment</option>
                    </select>
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Group Size</label>
                    <select name="group_size" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400">
                      <option value="">Any size</option>
                      <option value="solo">Solo traveler</option>
                      <option value="couple">Couple (2 people)</option>
                      <option value="small">Small group (3-5)</option>
                      <option value="large">Large group (6+)</option>
                    </select>
                  </div>
                </div>
              </div>

              <!-- Search Button -->
              <div class="text-center">
                <%= submit_tag 'Discover Amazing Local Experiences',
                    class: "w-full lg:w-auto px-12 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-full font-bold text-lg transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl focus:ring-4 focus:ring-blue-300 focus:outline-none",
                    id: "search-submit-btn" %>
              </div>

              <!-- Search Stats -->
              <div class="mt-6 text-center">
                <p class="text-sm text-gray-500">
                  <span class="font-semibold text-blue-600">1,247</span> local hosts ready to show you hidden gems
                </p>
              </div>
            </div>
          <% end %>
        </div>
        <div class="explore-subtitle mt-12">
          <h2 class="text-3xl font-semibold">Explore Authentic Stays in Emerging Destinations</h2>
        </div>
      </div>
    </div>
  </section>

  <section class="features-section py-16 bg-gray-50">
    <div class="container mx-auto px-4">
      <h2 class="text-3xl font-bold text-center mb-12">Why VisitMeet?</h2>
      <div class="grid gap-8 md:grid-cols-3">
        <div class="text-center">
          <div class="text-4xl mb-4">üåü</div>
          <h3 class="text-xl font-semibold mb-2">Authentic Hosts</h3>
          <p class="text-gray-600">Connect with passionate locals who love their city.</p>
        </div>
        <div class="text-center">
          <div class="text-4xl mb-4">üó∫Ô∏è</div>
          <h3 class="text-xl font-semibold mb-2">Hidden Gems</h3>
          <p class="text-gray-600">Discover places that guidebooks often miss.</p>
        </div>
        <div class="text-center">
          <div class="text-4xl mb-4">üëç</div>
          <h3 class="text-xl font-semibold mb-2">Easy Booking</h3>
          <p class="text-gray-600">Secure your spot with a few simple clicks.</p>
        </div>
      </div>
    </div>
  </section>

  <section class="signup-cta py-16 bg-blue-600 text-white text-center">
    <div class="container mx-auto px-4">
      <h2 class="text-3xl font-bold mb-4">Join VisitMeet Today</h2>
      <p class="mb-6">Sign up for free and connect with locals around the world.</p>
      <%= link_to 'Create an Account', new_user_registration_path,
          class: 'inline-block px-8 py-3 bg-white text-blue-600 font-semibold rounded-full shadow hover:bg-gray-100' %>
    </div>
  </section>
</main>

<script>
document.addEventListener("DOMContentLoaded", function() {
  
  // Custom Autocomplete Class
  class SimpleAutocomplete {
    constructor(inputId, dropdownId, tagType, icon) {
      this.input = document.getElementById(inputId);
      this.dropdown = document.getElementById(dropdownId);
      this.tagType = tagType;
      this.icon = icon;
      this.selectedIndex = -1;
      this.suggestions = [];
      this.debounceTimer = null;
      
      this.init();
    }
    
    init() {
      this.input.addEventListener('input', (e) => this.handleInput(e));
      this.input.addEventListener('focus', (e) => this.handleFocus(e));
      this.input.addEventListener('blur', (e) => this.handleBlur(e));
      this.input.addEventListener('keydown', (e) => this.handleKeydown(e));
      
      // Handle clicking outside
      document.addEventListener('click', (e) => {
        if (!this.input.contains(e.target) && !this.dropdown.contains(e.target)) {
          this.hideDropdown();
        }
      });
    }
    
    handleInput(e) {
      clearTimeout(this.debounceTimer);
      this.debounceTimer = setTimeout(() => {
        this.fetchSuggestions(e.target.value);
      }, 300);
    }
    
    handleFocus(e) {
      if (e.target.value.length === 0) {
        this.fetchSuggestions('');
      }
    }
    
    handleBlur(e) {
      // Small delay to allow clicking on dropdown items
      setTimeout(() => {
        if (!this.dropdown.matches(':hover')) {
          this.hideDropdown();
        }
      }, 150);
    }
    
    handleKeydown(e) {
      const items = this.dropdown.querySelectorAll('.autocomplete-item');
      
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        this.selectedIndex = Math.min(this.selectedIndex + 1, items.length - 1);
        this.updateSelection(items);
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        this.selectedIndex = Math.max(this.selectedIndex - 1, -1);
        this.updateSelection(items);
      } else if (e.key === 'Enter') {
        e.preventDefault();
        if (this.selectedIndex >= 0 && items[this.selectedIndex]) {
          this.selectItem(items[this.selectedIndex].textContent.replace(this.icon + ' ', ''));
        }
      } else if (e.key === 'Escape') {
        this.hideDropdown();
      }
    }
    
    updateSelection(items) {
      items.forEach((item, index) => {
        item.classList.toggle('selected', index === this.selectedIndex);
      });
    }
    
    async fetchSuggestions(term) {
      try {
        const response = await fetch(`/tags/autocomplete?term=${encodeURIComponent(term)}&tag_type=${this.tagType}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          }
        });
        
        if (!response.ok) throw new Error('Network response was not ok');
        
        const data = await response.json();
        this.suggestions = data;
        this.showSuggestions(data);
        
      } catch (error) {
        console.log('Using fallback suggestions due to:', error);
        // Fallback suggestions
        const fallbacks = this.tagType === 'location' 
          ? ['tokyo', 'paris', 'london', 'bali', 'newyork', 'barcelona', 'istanbul', 'rome']
          : ['photographer', 'chef', 'guide', 'artist', 'musician', 'historian', 'designer', 'local'];
        
        const filtered = term ? fallbacks.filter(item => 
          item.toLowerCase().includes(term.toLowerCase())
        ) : fallbacks;
        
        this.showSuggestions(filtered);
      }
    }
    
    showSuggestions(suggestions) {
      this.dropdown.innerHTML = '';
      this.selectedIndex = -1;
      
      if (suggestions.length === 0) {
        this.hideDropdown();
        return;
      }
      
      suggestions.slice(0, 8).forEach((suggestion, index) => {
        const item = document.createElement('div');
        item.className = 'autocomplete-item';
        item.innerHTML = `<span class="autocomplete-item-icon">${this.icon}</span>${suggestion}`;
        
        item.addEventListener('click', () => {
          this.selectItem(suggestion);
        });
        
        this.dropdown.appendChild(item);
      });
      
      this.dropdown.classList.add('show');
    }
    
    selectItem(value) {
      this.input.value = value;
      this.hideDropdown();
      this.input.focus();
    }
    
    hideDropdown() {
      this.dropdown.classList.remove('show');
      this.selectedIndex = -1;
    }
  }
  
  // Initialize autocomplete for both fields
  const locationAutocomplete = new SimpleAutocomplete('location-input', 'location-dropdown', 'location', 'üìç');
  const professionAutocomplete = new SimpleAutocomplete('profession-input', 'profession-dropdown', 'profession', 'üíº');
  
  // Add smooth animations
  const inputs = document.querySelectorAll('.landing_page form input');
  inputs.forEach(input => {
    input.addEventListener('focus', function() {
      this.closest('.bg-white/90').classList.add('transform', 'scale-105', 'transition-transform', 'duration-200');
    });
    
    input.addEventListener('blur', function() {
      this.closest('.bg-white/90').classList.remove('transform', 'scale-105');
    });
  });
  
  // Dynamic placeholder hints
  function addTypingHints() {
    const locationHints = ["tokyo", "paris", "bali", "barcelona", "istanbul"];
    const professionHints = ["photographer", "chef", "guide", "artist", "historian"];
    
    let locationIndex = 0;
    let professionIndex = 0;
    
    setInterval(() => {
      const locationInput = document.getElementById('location-input');
      const professionInput = document.getElementById('profession-input');
      
      if (locationInput.value === "" && document.activeElement !== locationInput) {
        locationInput.placeholder = `üåç Try "${locationHints[locationIndex]}"`;
        locationIndex = (locationIndex + 1) % locationHints.length;
      }
      
      if (professionInput.value === "" && document.activeElement !== professionInput) {
        professionInput.placeholder = `üë• Try "${professionHints[professionIndex]}"`;
        professionIndex = (professionIndex + 1) % professionHints.length;
      }
    }, 3000);
  }
  
  // Start hints after a delay
  setTimeout(addTypingHints, 2000);
});
</script>